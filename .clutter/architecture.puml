@startuml PySnap Architecture
!theme plain
skinparam backgroundColor white
skinparam componentStyle rectangle

title PySnap - Enhanced Snapshot Testing Architecture

package "PySnap Core" {
    [FunctionTracer] as tracer
    [CallEvent] as event
    [TracedSnapshot] as snapshot
}

package "Integration Layer" {
    [trace_calls] as context
    [trace_snapshot] as decorator
    [trace_module] as module_dec
    [quick_trace] as quick
}

package "Python Runtime" {
    [sys.settrace] as settrace
    [Frame Objects] as frames
}

package "Test Framework" {
    [pytest] as pytest
    [syrupy] as syrupy
    [Test Files] as tests
}

package "User Code" {
    [Target Functions] as functions
    [Nested Calls] as nested
    [Arguments & Returns] as data
}

' Core relationships
tracer --> settrace : "installs trace function"
tracer --> event : "creates"
event --> data : "captures"
snapshot --> tracer : "uses"

' Integration methods
context --> tracer : "context manager"
decorator --> tracer : "decorator wrapper"
module_dec --> tracer : "module-wide tracing"
quick --> tracer : "simplified interface"

' Runtime interaction
settrace --> frames : "monitors"
frames --> functions : "execution flow"
functions --> nested : "calls"

' Testing integration
tests --> context : "with trace_calls()"
tests --> snapshot : "TracedSnapshot()"
snapshot --> syrupy : "compatible with"
pytest --> tests : "runs"

' Data flow
note right of tracer
  **Key Features:**
  • Captures function args/returns
  • Tracks nested call hierarchy
  • Filters by module patterns
  • Thread-safe operation
  • Zero code modification option
end note

note bottom of snapshot
  **Snapshot Content:**
  • Complete call tree
  • Function arguments
  • Return values
  • Call depth/structure
  • Execution timeline
end note

@enduml